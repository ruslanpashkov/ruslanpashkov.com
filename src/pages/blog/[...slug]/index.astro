---
import type { Article } from '@/types/Article';

import TableOfContents from '@/components/Article/TableOfContents.astro';
import Glow from '@/components/Glow.astro';
import { contacts } from '@/data/contacts';
import Layout from '@/layouts/Layout.astro';
import { formatDate } from '@/utils/formatDate';
import { getPageTitle } from '@/utils/getPageTitle';
import { getArticleSchema } from '@/utils/schemas/getArticleSchema';
import { Icon } from 'astro-icon/components';
import { getCollection, render } from 'astro:content';

export async function getStaticPaths() {
	const articles = await getCollection('blog');

	return articles.map((article) => ({
		params: { slug: article.data.slug },
		props: { article },
	}));
}

interface Props {
	article: Article;
}

const { article } = Astro.props;

const { categories, description, publishedAt, slug, title, topic, updatedAt } = article.data;

const {
	Content,
	headings,
	remarkPluginFrontmatter: { minutesRead },
} = await render(article);

const articleSchema = getArticleSchema(Astro.url, article);

const pageTitle = getPageTitle(title);

const [email, ...socialLinks] = contacts;
---

<Layout
	article={article}
	cover={`${slug}.png`}
	description={description}
	schemas={[articleSchema]}
	title={pageTitle}
	type="article"
>
	<article class="article container container--spaced">
		<header class="article__header">
			<h1 class="article__title">{title}</h1>

			<aside class="article__meta">
				<div class="article__dates">
					<time class="article__published-at" datetime={publishedAt}>
						{formatDate(publishedAt)}
					</time>

					{
						updatedAt && (
							<time class="article__updated-at" datetime={updatedAt}>
								(updated at {formatDate(updatedAt)})
							</time>
						)
					}
				</div>

				<div class="article__info">
					<p class="article__reading-time">
						{minutesRead}
					</p>

					<p class="article__topic">{topic}</p>
				</div>

				<span class="article__glow article__glow--start">
					<Glow />
				</span>
			</aside>
		</header>

		{headings.length > 0 && <TableOfContents headings={headings} />}

		<div class="article__content markdown">
			<Content />
		</div>

		<div class="article__divider" role="presentation"></div>

		<footer class="article__footer">
			<ul class="article-tags">
				{categories.map((category) => <li class="article-tags__item">{category}</li>)}
			</ul>

			<section class="article__contacts">
				<div class="article__contact">
					<p class="article__contact-text">
						Got questions or feedback? Feel free to reach out!
					</p>

					<a class="article__contact-link hover" href={email.url}>
						<Icon
							aria-hidden="true"
							class="article__contact-icon"
							name="email-outlined"
						/>

						{email.title}
					</a>
				</div>

				<ul class="article__social">
					{
						socialLinks.map(({ icon, label, url }) => (
							<li>
								<a
									aria-label={label && `Contact via ${label}`}
									class="article__social-link hover"
									href={url}
									rel="noopener noreferrer"
									target="_blank"
								>
									<Icon
										aria-hidden="true"
										class="article__social-icon"
										name={`${icon}-outlined`}
									/>
								</a>
							</li>
						))
					}
				</ul>
			</section>

			<span class="article__glow article__glow--end">
				<Glow />
			</span>
		</footer>
	</article>
</Layout>

<style>
	.article {
		display: flex;
		flex-direction: column;
		gap: 20px;
		max-width: 800px;
	}

	.article__header {
		position: relative;
	}

	.article__title {
		margin-bottom: 20px;
		font-size: 1.875rem;
		line-height: 1.2;
		text-align: center;

		@media (width >= 768px) {
			font-size: 2.25rem;
		}

		@media (width >= 1024px) {
			font-size: 3rem;
		}
	}

	.article__meta {
		display: flex;
		flex-direction: column;
		gap: 20px;
		align-items: center;
		justify-content: center;
	}

	.article__dates {
		display: flex;
		flex-wrap: wrap;
		gap: 8px;
	}

	.article__published-at {
		font-size: 1.25rem;
	}

	.article__updated-at {
		font-size: 1.125rem;
		font-style: italic;
	}

	.article__info {
		display: flex;
		flex-wrap: wrap;
		gap: 20px;
		justify-content: space-between;
		width: 100%;
	}

	.article__reading-time {
		font-size: 1.125rem;
		font-style: italic;
	}

	.article__topic {
		padding: 2px 8px;
		border: 1px solid var(--color-contrast);
		border-radius: 24px;
	}

	.article__content {
		position: relative;
	}

	.article__divider {
		height: 1px;
		background-color: var(--color-contrast);
	}

	.article__footer {
		position: relative;
	}

	.article-tags {
		display: flex;
		flex-wrap: wrap;
		gap: 8px;
		align-items: start;
		margin-bottom: 40px;
	}

	.article-tags__item {
		padding: 2px 8px;
		border: 1px solid var(--color-contrast);
		border-radius: 24px;
	}

	.article__contacts {
		display: flex;
		flex-direction: column;
		gap: 32px;
	}

	.article__contact {
		display: flex;
		flex-direction: column;
		gap: 20px;
		align-items: center;
		text-align: center;
	}

	.article__contact-text {
		font-size: 1.125rem;
		color: var(--color-neutral);
	}

	.article__contact-link {
		display: flex;
		gap: 8px;
		align-items: center;
		font-size: 1.125rem;
		text-decoration: underline;
	}

	.article__contact-icon {
		--icon-size: 20px;

		width: var(--icon-size);
		height: var(--icon-size);
	}

	.article__social {
		display: flex;
		gap: 24px;
		align-items: center;
		justify-content: center;
	}

	.article__social-link {
		display: flex;
		align-items: center;
		justify-content: center;
	}

	.article__social-icon {
		--icon-size: 28px;

		width: var(--icon-size);
		height: var(--icon-size);
	}

	.article__glow {
		position: absolute;
		z-index: var(--z-index-glow);
	}

	.article__glow--start {
		bottom: 0;
		left: 0;
	}

	.article__glow--end {
		right: 0;
		bottom: 0;
	}
</style>

<script src="../../../scripts/scroll.ts"></script>
